window.connectSocketAndWebRTC = function(localStream) {
  const socket = io('https://legalshufflecam.ovh', {
    transports: ['websocket'],
    secure: true
  });
  window.socket = socket;

  const peerConnection = new RTCPeerConnection();
  window.peerConnection = peerConnection;

  const topBar = document.getElementById('topBar');
  const btnNext = document.getElementById('btnNext');
  const btnReport = document.getElementById('btnReport');
  const remoteVideo = document.getElementById('remoteVideo');

  peerConnection.ontrack = (event) => {
    console.log('[WebRTC] Flux distant reÃ§u', event.streams);
    remoteVideo.srcObject = event.streams[0];
  };

  remoteVideo.onloadedmetadata = () => {
    console.log('[WebRTC] VidÃ©o prÃªte Ã  jouer');
    remoteVideo.play();

    setTimeout(() => {
      if (typeof window.initFaceVisible === "function") {
        window.initFaceVisible(remoteVideo, "remote");
      }
    }, 1000);
  };

  socket.on('connect', () => {
    console.log('[Socket.IO] ConnectÃ© au serveur :', socket.id);
    socket.emit('ready-for-match');

    socket.on('match-found', async (peerId) => {
      console.log('[LSC] Match trouvÃ© avec :', peerId);
      if (topBar) topBar.textContent = " ConnectÃ© Ã  un partenaire";

      localStream.getTracks().forEach(track => {
        console.log('[WebRTC] Ajout track cÃ´tÃ© Ã©metteur', track);
        peerConnection.addTrack(track, localStream);
      });

      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
      socket.emit('offer', peerConnection.localDescription);
    });
  });

  socket.on('offer', async (offer) => {
    console.log('[WebRTC] Offer reÃ§ue', offer);

    localStream.getTracks().forEach(track => {
      console.log('[WebRTC] Ajout track cÃ´tÃ© receveur', track);
      peerConnection.addTrack(track, localStream);
    });

    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);
    socket.emit('answer', peerConnection.localDescription);
  });

  socket.on('answer', async (answer) => {
    console.log('[WebRTC] Answer reÃ§ue', answer);
    await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
  });

  socket.on('ice-candidate', async (candidate) => {
    console.log('[WebRTC] ICE candidate reÃ§ue', candidate);
    if (peerConnection.remoteDescription) {
      await peerConnection.addIceCandidate(candidate);
    }
  });

  socket.on('partner-disconnected', () => {
    console.log('[Socket.IO] Partenaire dÃ©connectÃ©');
    if (topBar) topBar.textContent = "âš  Partenaire dÃ©connectÃ©. Recherche...";
    window.disconnectWebRTC();
    setTimeout(() => {
      window.connectSocketAndWebRTC(localStream);
    }, 3000);
  });

  socket.on('force-disconnect', (reason) => {
    console.log('[MODERATION] DÃ©connexion forcÃ©e :', reason);
    if (reason === 'banned') {
      if (topBar) topBar.textContent = ' Banni pour 24h';
      if (btnNext) btnNext.disabled = true;
      if (btnReport) btnReport.disabled = true;
      window.disconnectWebRTC();
      alert('Vous avez Ã©tÃ© banni du service pour 24h.');
    }
  });

  socket.on('disconnect', (reason) => {
    console.warn('[Socket.IO] DÃ©connectÃ© :', reason);
    if (topBar) topBar.textContent = " DÃ©connectÃ©. Reconnexion...";
  });

  (function() {
    const originalOn = socket.on;
    socket.on = function(event, handler) {
      console.log("[RTC] ðŸ“¥ RÃ©ception socket.on :", event);
      return originalOn.call(this, event, handler);
    };
  })();

  peerConnection.onconnectionstatechange = () => {
    console.log("[RTC] ðŸ”„ Ã‰tat peerConnection :", peerConnection.connectionState);
  };
};

window.getLocalStream = async function() {
  if (window.localStream) return window.localStream;
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    window.localStream = stream;
    return stream;
  } catch (err) {
    console.error("[RTC] Erreur camÃ©ra :", err.message);
    throw err;
  }
};
